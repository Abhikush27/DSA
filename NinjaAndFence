package DynamicProgramming;

public class NinjaAndFence {
	
	
	 static int Mod = 1000000007;
	    public static int add(int a,int b){
	return (a%Mod + b%Mod)%Mod;
	    }
	    
	    public static int mul(int a,int b){
	return (a%Mod * b%Mod)%Mod;
	    }
	    
	    public static int solve(int n, int k){

	        
	     if(n==1)
	         return k;
	        if(n==2)
	            return add(k, mul(k,k-1))%Mod; //(k+(k*k-1))
	        
	        return add(mul((k-1) ,solve(n-2,k)) , mul((k-1),solve(n-1,k)))%Mod; 
//	        (k-1)*solve(n-2,k) + (k-1)*solve(n-1,k)

	    }
	    
	    
//	    tabulation
	    public static int solve2(int n, int k){

	        int dp[] = new int [n+1];
	        for(int i=0;i<=n;i++){
	dp[i]=0;}
	        dp[1] = k;
	        dp[2] = add(k, mul(k,k-1))%Mod;
	    
	        for(int i=3;i<=n;i++){
	  dp[i]= add(mul((k-1) ,dp[i-2]) , mul((k-1),dp[i-1]));
	            
	        }
	        
	       return dp[n];

	    }
	

}
