package DynamicProgramming;
import java.util.*;

public class GetMinSquares {
	
	 
	 public static int solve(int n){
	        if(n<=3)
	        return n;
	        
	        int ans  =n;
	        
	        for(int i=1;i*i<=n;i++){
	            int temp = i*i;
	            ans = Math.min(ans,1+solve(n-temp));
	        }
	        return ans;
	    }
	    
	    public static int second(int n){
	        int dp[] = new int[n+1];
	        Arrays.fill(dp,-1);
	        if(n<=3)
	        return n;
	        
	        int ans  =n;
	        
	        if(dp[n]!=-1)
	        return dp[n];
	        
	        for(int i=1;i*i<=n;i++){
	            int temp = i*i;
	            dp[i] = Math.min(ans,1+solve(n-temp));
	        }
	        return dp[n];
	    }
	    
	    
	       public static int third(int n)
	    {
	        
	        int[] T = new int[n + 1];
	 
	        for (int i = 0; i <= n; i++)
	        {
	            T[i] = i;
	 
	           
	            for (int j = 1; j*j <= i; j++)
	            {
	              
	                T[i] = Integer.min(T[i], 1 + T[i - j*j]);
	            }
	        }
	 
	        return T[n];
	    }

}
