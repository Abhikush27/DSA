package DynamicProgramming;
import java.util.*;

public class MinimumCostClimibingStairs {
	
//	method 1(recursion)
	public static int solve1(int n,int[] cost) {
		if(n==1)
			return cost[1];
		if(n==0)
			return cost[0];
		
		int ans = Math.min(solve1(n-1,cost), solve1(n-2,cost)) + cost[n];
		return ans;
	}
	
	
	
//	method 2 (memorization)
	public static int solve2(int n,int[] cost) {
//		step 1
		int dp[] = new int[n+1];
		Arrays.fill(dp, -1);
		
		if(n==1)
			return cost[1];
		if(n==0)
			return cost[0];
		
//		step3
		if(dp[n]!=-1)
			return dp[n];
		
//		step2 
		dp[n] = Math.min(solve2(n-1,cost), solve2(n-2,cost)) + cost[n];
		return dp[n];
	}
	
	
	
//	method 3(tabulation)
	public static int solve3(int n,int[] cost) {
//		step 1
		int dp[] = new int[n+1];
		
		dp[0] = cost[0];
		dp[1] = cost[1];
		
//		step3
		for(int i=2;i<n;i++) {
			dp[i] = Math.min(dp[i-1], dp[i-2]) + cost[i];
		}
		
		
		return Math.min(dp[n-1], dp[n-2]);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
int cost[] = {1,100,1,1,1,100,1,1};
int n = cost.length;
int x = Math.min(solve2(n-1,cost),solve2(n-2,cost));
int x2 = solve3(n,cost);
System.out.println(x);
System.out.print(x2);
	}
	
//	O(n)
//	O(1)

}
