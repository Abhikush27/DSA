package DynamicProgramming;

public class CountDearrangements {
	
	
	 
    public static long solve(int n ){

        if(n==1)
            return 0;
        if(n==2)
            return 1;
        
        return (n-1)*(solve(n-1)+solve(n-2));
//         as we have n-1 places to place the number and n-1 and n-2 numbers left to place
    }
    
    
    
    
//    Tabulation
    
    public static long solve2(int n ){
    	long MOD = (10^9+7);
    	        long dp[] = new long[n+1];
    	      
    	        dp[1]=0;
    	        dp[2]=1;
    	        
    	        for(int i=3;i<=n;i++){
    	long  x = dp[i-1]%MOD;
    	            long y =+dp[i-2]%MOD;
    	            long sum = (x+y)%MOD;
    	          long ans = ((i-1)*sum)%MOD;
    	            dp[i]=ans;
    	        }
    	        
    	        return dp[n];
//    	         as we have n-1 places to place the number and n-1 and n-2 numbers left to place
    	    }

}
