class Solution {

public int[] nextsmaller(int arr[],int n){
    Stack<Integer> st = new Stack<>();
    st.push(-1);
    int ans[] = new int[n];
    for(int i=n-1;i>=0;i--){
        while(st.peek()!=-1 && arr[st.peek()]>=arr[i]){
            st.pop();
        }
        ans[i] = st.peek();
st.push(i);
    }
    return ans;
}

public int[] prevsmaller(int arr[],int n){
    Stack<Integer> st = new Stack<>();
    st.push(-1);
    int ans[] = new int[n];
    for(int i=0;i<n;i++){
        while(st.peek()!=-1 && arr[st.peek()]>=arr[i]){
            st.pop();
        }
        ans[i] = st.peek();
st.push(i);
    }
    return ans;
}

    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int area = Integer.MIN_VALUE;
        int nxsmall[]= new int[n];
        int prsmall[] = new int[n];
        nxsmall = nextsmaller(heights,n);
        prsmall = prevsmaller(heights,n);

        for(int i=0;i<n;i++){
            int l= heights[i];

            if(nxsmall[i]==-1)
            nxsmall[i]=n;

            int b = nxsmall[i]-prsmall[i]-1;
            area = Math.max(area,l*b);
        }
        return area;
    }
}
