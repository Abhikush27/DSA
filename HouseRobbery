package DynamicProgramming;

public class HouseRobbery {
	
	  public static long solve(long[] ans){
          int n =ans.length;
   if (n == 0)
              return 0;
          if (n == 1)
              return ans[0];
          if (n == 2)
              return Math.max(ans[0],ans[1]);
   
          
          long[] dp = new long[n];
   
        
          dp[0] = ans[0];
          dp[1] = Math.max(ans[0],ans[1]);
   
          // Fill remaining positions
          for (int i = 2; i < n; i++){
              dp[i]
                  = Math.max(ans[i] + dp[i - 2], dp[i - 1]);
          }
       long x = dp[n-1];
          return x;
      
   }
 
	public static long houseRobber(int[] valueInHouse) {
		// Write your code here.	
     int n = valueInHouse.length;
     if(n==1)
         return valueInHouse[0];
     long []first = new long[n];
     long []last = new long[n];
     for(int i=0;i<n;i++){
         if(i!=n-1)
first[i] = valueInHouse[i];
if(i!=0)
 last[i] = valueInHouse[i];
     }
    return Math.max(solve(first),solve(last));
	}
}
